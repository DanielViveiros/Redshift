{"entities":[{"fqn":"/Community Queries","id":"067ce53b-d1d2-431a-9f3d-4765eb18eebf","parent_folder_id":"bb6de4af-1aad-493e-a9ee-b3e75cf58ed7","name":"Community Queries","entity_type":"FOLDER"},{"fqn":"/Community Queries/Redshift/Administrative Queries/Users permissions on all objects in database","id":"25e8bfed-cdaa-4cd7-8170-24b226adec67","parent_folder_id":"b1dab408-6e1f-4303-aa9b-cb45f1a37eff","name":"Users permissions on all objects in database","entity_type":"SQL_ENTITY","description":"Shows all permissions on all objects for all users in database","content":"select \r\n\tobjowner, \r\n\tschemaname, \r\n\tobjname, \r\n\tfullobjname,\r\n\tobjtype,\r\n\tgrantee,\r\n\tgrantor,\r\n\tcase when charindex('r',privilege)  > 0 then true else false end as \"select\",\r\n\tcase when charindex('r*',privilege) > 0 then true else false end as \"select_with_grant\" ,\r\n\tcase when charindex('a',privilege)  > 0 then true else false end as  \"insert\",\r\n\tcase when charindex('a*',privilege) > 0 then true else false end as  \"insert_with_grant\" ,\r\n\tcase when charindex('w',privilege)  > 0 then true else false end as \"update\",\r\n\tcase when charindex('w*',privilege) > 0 then true else false end as \"update_with_grant\",\r\n\tcase when charindex('d',privilege)  > 0 then true else false end as \"delete\",\r\n\tcase when charindex('d*',privilege) > 0 then true else false end as \"delete_with_grant\" ,\r\n\tcase when charindex('R',privilege)  > 0 then true else false end as \"rule\",\r\n\tcase when charindex('R*',privilege) > 0 then true else false end as \"rule_with_grant\",\r\n\tcase when charindex('x',privilege)  > 0 then true else false end as \"references\",\r\n\tcase when charindex('x*',privilege) > 0 then true else false end as \"references_with_grant\",\r\n\tcase when charindex('t',privilege)  > 0 then true else false end as \"trigger\",\r\n\tcase when charindex('t*',privilege) > 0 then true else false end as \"trigger_with_grant\",\r\n\tcase when charindex('U',privilege)  > 0 then true else false end as \"usage\",\r\n\tcase when charindex('U*',privilege) > 0 then true else false end as \"usage_with_grant\",\r\n\tcase when charindex('C',privilege)  > 0 then true else false end as \"create\",\r\n\tcase when charindex('C*',privilege) > 0 then true else false end as \"create_with_grant\",\r\n\tcase when charindex('T',privilege)  > 0 then true else false end as \"temporary\",\r\n\tcase when charindex('T*',privilege) > 0 then true else false end as \"temporary_with_grant\",\r\n\tcase when charindex('X',privilege)  > 0 then true else false end as \"execute\",\r\n\tcase when charindex('X*',privilege) > 0 then true else false end as \"execute_with_grant\"\t\r\nfrom\r\n( \r\n\tSELECT \r\n\t\tobjowner, \r\n\t\tschemaname, \r\n\t\tobjname, \r\n\t\tobjtype,\r\n\t\tcase when split_part(aclstring,'=',1)='' then 'PUBLIC' else translate(trim(split_part(aclstring,'=',1)),'\"','') end::text as grantee,\r\n\t\ttranslate(trim(split_part(aclstring,'/',2)),'\"','')::text as grantor, \r\n\t\ttrim(split_part(split_part(aclstring,'=',2),'/',1))::text as privilege, \r\n\t\tcase when objtype = 'default acl' then objname \r\n\t\t\twhen objtype in ('procedure','function') and regexp_instr(schemaname,'[^a-z]') > 0 then objname\r\n\t\t\twhen objtype in ('procedure','function') then quote_ident(schemaname)||'.'||objname \r\n\t\t\telse nvl(quote_ident(schemaname)||'.'||quote_ident(objname),quote_ident(objname)) \r\n\t\tend::text as fullobjname\r\n\tFROM (\r\n\t\t-- TABLE & VIEW \r\n\t\tSELECT \r\n\t\t\tpg_get_userbyid(b.relowner)::text AS objowner, \r\n\t\t\ttrim(c.nspname)::text AS schemaname,  \r\n\t\t\tb.relname::text AS objname,\r\n\t\t\tcase when relkind='r' then 'table' else 'view' end::text as objtype, \r\n\t\t\ttrim(split_part(array_to_string(b.relacl,','), ',', ns.n))::text as aclstring, \r\n\t\t\tns.n as grantseq\r\n\t\tFROM (\r\n\t\t\t\tSELECT oid, generate_series(1,array_upper(relacl,1)) AS n \r\n\t\t\t\tFROM pg_class\r\n\t\t) ns\r\n\t\tinner join pg_class b on b.oid = ns.oid and  ns.n <= array_upper(b.relacl,1)\r\n\t\tjoin pg_namespace c on b.relnamespace = c.oid\r\n\t\twhere relkind in ('r','v')\r\n\t\t\tUNION ALL\r\n\t\t-- SCHEMA \r\n\t\tSELECT \r\n\t\t\tpg_get_userbyid(b.nspowner)::text as objowner,\r\n\t\t\tnull::text as schemaname,\r\n\t\t\tb.nspname::text as objname,\r\n\t\t\t'schema'::text as objtype,\r\n\t\t\ttrim(split_part(array_to_string(b.nspacl,','), ',', ns.n))::text as aclstring,\r\n\t\t\tns.n as grantseq\r\n\t\tFROM (\r\n\t\t\tSELECT oid, generate_series(1,array_upper(nspacl,1)) AS n \r\n\t\t\tFROM pg_namespace\r\n\t\t) ns\r\n\t\tinner join pg_namespace b on b.oid = ns.oid and ns.n <= array_upper(b.nspacl,1)\r\n\t\t\tUNION ALL\r\n\t\t-- DATABASE \r\n\t\tSELECT \r\n\t\t\tpg_get_userbyid(b.datdba)::text as objowner,\r\n\t\t\tnull::text as schemaname,\r\n\t\t\tb.datname::text as objname,\r\n\t\t\t'database'::text as objtype,\r\n\t\t\ttrim(split_part(array_to_string(b.datacl,','), ',', ns.n))::text as aclstring,\r\n\t\t\tns.n as grantseq\r\n\t\tFROM (\r\n\t\t\tSELECT oid, generate_series(1,array_upper(datacl,1)) AS n \r\n\t\t\tFROM pg_database\r\n\t\t) ns\r\n\t\tinner join pg_database b on b.oid = ns.oid and ns.n <= array_upper(b.datacl,1) \r\n\t\t\tUNION ALL \r\n\t\tSELECT \r\n\t\t\tpg_get_userbyid(b.proowner)::text as objowner,\r\n\t\t\ttrim(c.nspname)::text as schemaname, \r\n\t\t\ttextin(regprocedureout(b.oid::regprocedure))::text as objname,\r\n\t\t\tdecode(prorettype,0,'procedure','function')::text as objtype,\r\n\t\t\ttrim(split_part(array_to_string(b.proacl,','), ',', ns.n))::text as aclstring,\r\n\t\t\tns.n as grantseq  \r\n\t\tFROM (\r\n\t\t\tSELECT oid, generate_series(1,array_upper(proacl,1)) AS n \r\n\t\t\tFROM pg_proc\r\n\t\t) ns\r\n\t\tinner join pg_proc b on b.oid = ns.oid and ns.n <= array_upper(b.proacl,1)\r\n\t\tjoin pg_namespace c on b.pronamespace=c.oid \r\n\t\t\tUNION ALL\r\n\t\t-- LANGUAGE privileges\r\n\t\tSELECT \r\n\t\t\tnull::text as objowner,\r\n\t\t\tnull::text as schemaname,\r\n\t\t\tlanname::text as objname,\r\n\t\t\t'language'::text as objtype,\r\n\t\t\ttrim(split_part(array_to_string(b.lanacl,','), ',', ns.n))::text as aclstring,\r\n\t\t\tns.n as grantseq \r\n\t\tFROM (\r\n\t\t\tSELECT oid,generate_series(1,array_upper(lanacl,1)) AS n \r\n\t\t\tFROM pg_language\r\n\t\t) ns\r\n\t\tinner join pg_language b on b.oid = ns.oid and ns.n <= array_upper(b.lanacl,1)\r\n\t\t\tUNION ALL\r\n\t\t-- DEFAULT ACL \r\n\t\tSELECT \r\n\t\t\tpg_get_userbyid(b.defacluser)::text as objowner,\r\n\t\t\ttrim(c.nspname)::text as schemaname,\r\n\t\t\tdecode(b.defaclobjtype,'r','tables','f','functions','p','procedures')::text as objname,\r\n\t\t\t'default acl'::text as objtype,\r\n\t\t\ttrim(split_part(array_to_string(b.defaclacl,','), ',', ns.n))::text as aclstring,\r\n\t\t\tns.n as grantseq \r\n\t\tFROM (\r\n\t\t\tSELECT oid,generate_series(1,array_upper(defaclacl,1)) AS n \r\n\t\t\tFROM pg_default_acl\r\n\t\t) ns\r\n\t\tjoin pg_default_acl b on b.oid = ns.oid and ns.n <= array_upper(b.defaclacl,1) \r\n\t\tleft join  pg_namespace c on b.defaclnamespace=c.oid\r\n\t) \r\n\twhere  (split_part(aclstring,'=',1) <> split_part(aclstring,'/',2) \r\n\tand split_part(aclstring,'=',1) <> 'rdsdb'\r\n\tand NOT (split_part(aclstring,'=',1)='' AND split_part(aclstring,'/',2) = 'rdsdb')) \r\n) r\r\nwhere grantee in (select usename from pg_user) or grantee in (select 'group ' || groname from pg_group)\r\n\r\n","type":"QUERY","platform":"Snowflake","executed_at":"2019-11-05T12:10:15.131370500Z","executed_count":2},{"fqn":"/Community Queries/Redshift/Administrative Queries/Users' permissions on table","id":"421b3917-8b54-4024-9b1b-cdb1225bc6d2","parent_folder_id":"b1dab408-6e1f-4303-aa9b-cb45f1a37eff","name":"Users' permissions on table","entity_type":"SQL_ENTITY","description":"Shows information on permissions for particular table","content":"select * \r\nfrom (\r\n\tSELECT\r\n\tu.usename,\r\n\t    t.schemaname||'.'||t.tablename as tablename,\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'select') AS user_has_select_permission,\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'insert') AS user_has_insert_permission,\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'update') AS user_has_update_permission,\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'delete') AS user_has_delete_permission,\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'references') AS user_has_references_permission\r\n\tFROM\r\n\t    pg_tables t\r\n\tcross join \t pg_user u\r\n\twhere schemaname not in  ('pg_catalog', 'information_schema') and usename not in ( 'rdsdb')\r\n) r\r\nwhere (user_has_select_permission or user_has_insert_permission or user_has_update_permission or user_has_delete_permission or user_has_references_permission )\r\nand tablename like '%'||$table_name","type":"QUERY","platform":"Snowflake","executed_at":"2019-11-04T13:09:51.791890700Z","executed_count":7},{"fqn":"/Community Queries/Redshift/Administrative Queries","id":"b1dab408-6e1f-4303-aa9b-cb45f1a37eff","parent_folder_id":"f817d4fd-5d49-4647-a6af-6c4c1481ecc7","name":"Administrative Queries","entity_type":"FOLDER"},{"fqn":"/Community Queries/Redshift/Administrative Queries/User permissions on tables in database for particular user","id":"edd55676-3fa1-4256-84e1-f97dfee69fa4","parent_folder_id":"b1dab408-6e1f-4303-aa9b-cb45f1a37eff","name":"User permissions on tables in database for particular user","entity_type":"SQL_ENTITY","description":"Shows information about user's permissions on tables","content":"select * \r\nfrom (\r\n\tSELECT\r\n\tu.usename,\r\n\t    t.schemaname||'.'||t.tablename as tablename,\t\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'select') AS user_has_select_permission,\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'insert') AS user_has_insert_permission,\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'update') AS user_has_update_permission,\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'delete') AS user_has_delete_permission,\r\n\t    has_table_privilege(u.usename,t.schemaname||'.'||t.tablename,'references') AS user_has_references_permission\r\n\tFROM\r\n\t    pg_tables t\r\n\tcross join \t pg_user u\r\n\twhere schemaname not in  ('pg_catalog', 'information_schema') and usename not in ( 'rdsdb')\r\n) r\r\nwhere (user_has_select_permission or user_has_insert_permission or user_has_update_permission or user_has_delete_permission or user_has_references_permission )\r\nand usename = lower($user_name)","type":"QUERY","platform":"Snowflake","executed_at":"2019-11-04T13:06:35.307095100Z","executed_count":4},{"fqn":"/Community Queries/Redshift","id":"f817d4fd-5d49-4647-a6af-6c4c1481ecc7","parent_folder_id":"067ce53b-d1d2-431a-9f3d-4765eb18eebf","name":"Redshift","entity_type":"FOLDER"}]}